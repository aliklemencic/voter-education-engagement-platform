"""
table_ids:
    congress_members
        schema = [bigquery.SchemaField('name', "STRING", mode="REQUIRED"),
              bigquery.SchemaField('congress', "STRING", mode="REQUIRED"),
              bigquery.SchemaField('party', "STRING", mode="REQUIRED"),
              bigquery.SchemaField('state', "STRING", mode="REQUIRED"),
              bigquery.SchemaField('district', "STRING"),
              bigquery.SchemaField('lcv_rating', "STRING"),
              bigquery.SchemaField('lcv_link', "STRING")]
    bills
        schema = [bigquery.SchemaField('openstates_id', "STRING", mode="REQUIRED"),
            bigquery.SchemaField('identifier', "STRING", mode="REQUIRED"),
            bigquery.SchemaField('title', "STRING", mode="REQUIRED"),
            bigquery.SchemaField('openstates_link', "STRING", mode="REQUIRED"),
            bigquery.SchemaField('state', "STRING", mode="REQUIRED"),
            bigquery.SchemaField('create_date', "STRING", mode="REQUIRED"),
            bigquery.SchemaField('latest_action_date', "STRING"),
            bigquery.SchemaField('latest_action_description', "STRING"),
            bigquery.SchemaField('abstract', "STRING")]
    issuehub_users
"""

import os
import openstates_api
import lcv_scraper
from bs4 import BeautifulSoup
from datetime import datetime
from google.cloud import bigquery


def import_lcv_data(first_create):
    if first_create:
        schema = [bigquery.SchemaField('name', "STRING", mode="REQUIRED"),
              bigquery.SchemaField('congress', "STRING", mode="REQUIRED"),
              bigquery.SchemaField('party', "STRING", mode="REQUIRED"),
              bigquery.SchemaField('state', "STRING", mode="REQUIRED"),
              bigquery.SchemaField('district', "STRING"),
              bigquery.SchemaField('lcv_rating', "STRING"),
              bigquery.SchemaField('lcv_link', "STRING")]
        insert_table_to_bigquery(schema, 'sixth-window-364916.issuehub.congress_members')
    lcv_data = lcv_scraper.get_lcv_data()
    schema_fields = ['name', 'congress', 'party', 'state',
        'district', 'lcv_rating', 'lcv_link']
    write_rows_to_bigquery(schema_fields, lcv_data, 'congress_members')


def import_legislation(state, keywords, first_create):
    if first_create:
        schema = [bigquery.SchemaField('openstates_id', "STRING", mode="REQUIRED"),
            bigquery.SchemaField('identifier', "STRING", mode="REQUIRED"),
            bigquery.SchemaField('title', "STRING", mode="REQUIRED"),
            bigquery.SchemaField('openstates_link', "STRING", mode="REQUIRED"),
            bigquery.SchemaField('state', "STRING", mode="REQUIRED"),
            bigquery.SchemaField('create_date', "STRING", mode="REQUIRED"),
            bigquery.SchemaField('latest_action_date', "STRING"),
            bigquery.SchemaField('latest_action_description', "STRING"),
            bigquery.SchemaField('abstract', "STRING")]
        insert_table_to_bigquery(schema, 'sixth-window-364916.issuehub.bills')
    bills = openstates_api.get_data_for_state_and_topic(state, keywords)
    schema_fields = ['openstates_id', 'identifier', 'title',
        'openstates_link', 'state', 'create_date', 'latest_action_date',
        'latest_action_description', 'abstract']
    bill_data = get_bill_data(bills, state)
    write_rows_to_bigquery(schema_fields, bill_data, 'bills')


def get_bill_data(bills, state):
    bill_data = []
    for bill in bills:
        current_bill = {}
        current_bill['openstates_id'] = bill[0]['id']
        current_bill['identifier'] = bill[0]['identifier']
        current_bill['title'] = bill[0]['title']
        current_bill['openstates_link'] = bill[0]['openstates_url']
        current_bill['create_date'] = get_date_string(bill[0]['created_at'])
        current_bill['latest_action_date'] = get_date_string(bill[0]['latest_action_date'])
        current_bill['latest_action_description'] = bill[0]['latest_action_description']
        current_bill['state'] = state

        if bill[0]['abstracts']:
            abstract = bill[0]['abstracts'][0]['abstract']
            if '<' in abstract:
                soup = BeautifulSoup(abstract)
                current_bill['abstract'] = ''
                for p in soup.find_all('p'):
                    if p.text == current_bill['title']:
                        continue
                    if current_bill['abstract']:
                        current_bill['abstract'] += " "
                    current_bill['abstract'] += p.text.strip()
            else:
                current_bill['abstract'] = abstract
        else: 
            current_bill['abstract'] = ''

        bill_data.append(current_bill)

    return bill_data


def get_date_string(full_date):
    date = full_date[:10]
    date_object = datetime.strptime(date, '%Y-%m-%d')
    date_string = date_object.strftime('%B %d, %Y')
    return date_string


def create_dataset_bigquery():
    os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = './issuehub_cloud_service_admin.json'
    client = bigquery.Client()
    dataset = bigquery.Dataset('issuehub')
    dataset.location = "US"
    dataset = client.create_dataset(dataset, timeout=30)
    print("Created dataset {}.{}".format(dataset.project, dataset.dataset_id))


def write_rows_to_bigquery(schema_fields, data, table_id):
    """
    :param data: list of dictionaries of rows of data to insert
    """
    os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = './issuehub_cloud_service_admin.json'
    client = bigquery.Client()

    table_ref = client.dataset('issuehub').table(table_id) 
    table = client.get_table(table_ref)

    insert_list = []
    for row in data:
        values = []
        for key in schema_fields:
            values.append(row[key])
        insert_list.append(tuple(values))

    errors = client.insert_rows(table, insert_list) 
    assert errors == []
    print("Data successfully inserted into {}.".format(table_id))


def remove_rows_bigquery(table, condition):
    os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = './issuehub_cloud_service_admin.json'
    client = bigquery.Client()

    sql = "DELETE FROM " + table + " WHERE " + condition

    query_job = client.query(sql)
    query_job.result()
    print("Rows removed from {} where {}".format(table, condition))


def insert_table_to_bigquery(schema, table_id):
    os.environ['GOOGLE_APPLICATION_CREDENTIALS'] = './issuehub_cloud_service_admin.json'
    client = bigquery.Client()

    table = bigquery.Table(table_id, schema=schema)
    table = client.create_table(table)
    print("Created table {}.{}.{}".format(table.project, table.dataset_id, table.table_id))
